// <auto-generated />
using System;
using Achi_Sinema.Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Achi_Sinema.Migrations
{
    [DbContext(typeof(AchiDbContext))]
    partial class AchiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Achi_Sinema.Tables.Actor", b =>
                {
                    b.Property<int>("ActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorID"));

                    b.Property<string>("ActorBiography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActorBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActorGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Director", b =>
                {
                    b.Property<int>("DirectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorID"));

                    b.Property<string>("DirectorBiography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DirectorBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            GenreName = "Aksiyon"
                        },
                        new
                        {
                            GenreID = 2,
                            GenreName = "Dram"
                        },
                        new
                        {
                            GenreID = 3,
                            GenreName = "Komedi"
                        },
                        new
                        {
                            GenreID = 4,
                            GenreName = "Korku"
                        },
                        new
                        {
                            GenreID = 5,
                            GenreName = "Bilim Kurgu"
                        },
                        new
                        {
                            GenreID = 6,
                            GenreName = "Fantastik"
                        },
                        new
                        {
                            GenreID = 7,
                            GenreName = "Macera"
                        },
                        new
                        {
                            GenreID = 8,
                            GenreName = "Romantik"
                        },
                        new
                        {
                            GenreID = 9,
                            GenreName = "Belgesel"
                        },
                        new
                        {
                            GenreID = 10,
                            GenreName = "Romantik"
                        },
                        new
                        {
                            GenreID = 11,
                            GenreName = "Bilim Kurgu"
                        },
                        new
                        {
                            GenreID = 12,
                            GenreName = "Gerilim"
                        },
                        new
                        {
                            GenreID = 13,
                            GenreName = "Gizem"
                        },
                        new
                        {
                            GenreID = 14,
                            GenreName = "Polisye"
                        },
                        new
                        {
                            GenreID = 15,
                            GenreName = "Savaş"
                        },
                        new
                        {
                            GenreID = 16,
                            GenreName = "Animasyon"
                        },
                        new
                        {
                            GenreID = 17,
                            GenreName = "Çocuk"
                        },
                        new
                        {
                            GenreID = 18,
                            GenreName = "Müzikal"
                        },
                        new
                        {
                            GenreID = 19,
                            GenreName = "Tarih"
                        });
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"));

                    b.Property<int>("MovieDirectorDirectorID")
                        .HasColumnType("int");

                    b.Property<string>("MovieIMBDRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoviePoster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovieRelase")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID");

                    b.HasIndex("MovieDirectorDirectorID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("RatingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            RatingName = "6 Yaş Altı"
                        },
                        new
                        {
                            RatingId = 2,
                            RatingName = "6 Yaş Üstü"
                        },
                        new
                        {
                            RatingId = 3,
                            RatingName = "10 Yaş Altı"
                        },
                        new
                        {
                            RatingId = 4,
                            RatingName = "10 Yaş Üstü"
                        },
                        new
                        {
                            RatingId = 5,
                            RatingName = "13 Yaş Altı"
                        },
                        new
                        {
                            RatingId = 6,
                            RatingName = "13 Yaş Üstü"
                        },
                        new
                        {
                            RatingId = 7,
                            RatingName = "16 Yaş Üstü"
                        },
                        new
                        {
                            RatingId = 8,
                            RatingName = "18 Yaş Üstü"
                        },
                        new
                        {
                            RatingId = 9,
                            RatingName = "Genel İzleyici Kitlesi"
                        },
                        new
                        {
                            RatingId = 10,
                            RatingName = "Şiddet/Korku"
                        },
                        new
                        {
                            RatingId = 11,
                            RatingName = "Cinsellik/Çıplaklık"
                        },
                        new
                        {
                            RatingId = 12,
                            RatingName = "Olumsuz Örnek"
                        });
                });

            modelBuilder.Entity("Achi_Sinema.Tables.User", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<string>("StaffLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            StaffLogin = "atilla",
                            StaffName = "Atilla Burak",
                            StaffPassword = "12345",
                            StaffSurname = "Artıran"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorMoviesMovieID")
                        .HasColumnType("int");

                    b.Property<int>("MovieActorsActorID")
                        .HasColumnType("int");

                    b.HasKey("ActorMoviesMovieID", "MovieActorsActorID");

                    b.HasIndex("MovieActorsActorID");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenreMoviesMovieID")
                        .HasColumnType("int");

                    b.Property<int>("MovieGenresGenreID")
                        .HasColumnType("int");

                    b.HasKey("GenreMoviesMovieID", "MovieGenresGenreID");

                    b.HasIndex("MovieGenresGenreID");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieRating", b =>
                {
                    b.Property<int>("MovieRatingsRatingId")
                        .HasColumnType("int");

                    b.Property<int>("RatingMoviesMovieID")
                        .HasColumnType("int");

                    b.HasKey("MovieRatingsRatingId", "RatingMoviesMovieID");

                    b.HasIndex("RatingMoviesMovieID");

                    b.ToTable("MovieRating");
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Movie", b =>
                {
                    b.HasOne("Achi_Sinema.Tables.Director", "MovieDirector")
                        .WithMany("Movies")
                        .HasForeignKey("MovieDirectorDirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieDirector");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Achi_Sinema.Tables.Movie", null)
                        .WithMany()
                        .HasForeignKey("ActorMoviesMovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achi_Sinema.Tables.Actor", null)
                        .WithMany()
                        .HasForeignKey("MovieActorsActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Achi_Sinema.Tables.Movie", null)
                        .WithMany()
                        .HasForeignKey("GenreMoviesMovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achi_Sinema.Tables.Genre", null)
                        .WithMany()
                        .HasForeignKey("MovieGenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieRating", b =>
                {
                    b.HasOne("Achi_Sinema.Tables.Rating", null)
                        .WithMany()
                        .HasForeignKey("MovieRatingsRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achi_Sinema.Tables.Movie", null)
                        .WithMany()
                        .HasForeignKey("RatingMoviesMovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Achi_Sinema.Tables.Director", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
